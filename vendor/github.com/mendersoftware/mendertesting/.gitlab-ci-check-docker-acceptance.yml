# .gitlab-ci-check-docker-acceptance.yml
#
# This gitlab-ci template builds, runs acceptance tests and publishes
# code coverage from a Docker based repository.
#
# It assumes the following files:
# * Dockerfile.acceptance-testing: to build the the binary with test coverage.
# * tests/Dockerfile to build the Python test runner.
# * tests/docker-compose-acceptance.yml for the tests composition runtime.
# * tests/docker-compose-acceptance-enterprise.yml (optional) for Enteprise tests.
#
# Requires DOCKER_REPOSITORY variable to be set in the calling Pipeline.
# Add it to the project in hand through Gitlab's include functionality
#
# variables:
#   DOCKER_REPOSITORY: <Image FQN, i.e mendersoftware/reponame>
# include:
#   - project: 'Northern.tech/Mender/mendertesting'
#     file: '.gitlab-ci-check-docker-acceptance.yml'
#
# Requires the following variables set in the project CI/CD settings:
#   COVERALLS_TOKEN: Token from coveralls.io for this repository
#
# If the tests require access to Mender Registry hosted images, it
# will require also the following vabiables:
#   REGISTRY_MENDER_IO_USERNAME: Username for registry.mender.io
#   REGISTRY_MENDER_IO_PASSWORD: Password for registry.mender.io
#

stages:
  - test_prep
  - test
  - publish

test:prepare_acceptance:
  stage: test_prep
  image: docker
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  services:
    - docker:19.03.5-dind
  before_script:
    - export DOCKER_TAG=${CI_COMMIT_REF_SLUG:-master}
    - export SERVICE_IMAGE=${DOCKER_REPOSITORY}:${DOCKER_TAG}
    - export COMMIT_TAG=${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
  script:
    - docker build -f Dockerfile.acceptance-testing -t $DOCKER_REPOSITORY:prtest .
    - docker save $DOCKER_REPOSITORY:prtest > tests_image.tar
    - docker build -t $DOCKER_REPOSITORY:pr .
    - docker run --rm --entrypoint "/bin/sh" -v $(pwd):/binary $DOCKER_REPOSITORY:pr -c "cp /usr/bin/${CI_PROJECT_NAME} /binary"
    - docker build -t testing -f tests/Dockerfile tests
    - docker save testing > acceptance_testing_image.tar
    - wget https://d1b0l86ne08fsf.cloudfront.net/mender-artifact/master/linux/mender-artifact
    - chmod +x mender-artifact
  artifacts:
    expire_in: 2w
    paths:
      - tests_image.tar
      - acceptance_testing_image.tar
      - ${CI_PROJECT_NAME}
      - mender-artifact

test:acceptance_tests:
  stage: test
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  tags:
    - docker
  image: tiangolo/docker-with-compose
  services:
    - docker:19.03.5-dind
  dependencies:
    - test:prepare_acceptance
  before_script:
    - apk add git bash
    - git clone --depth=1 https://github.com/mendersoftware/integration.git mender-integration
    - mv mender-integration/extra/travis-testing/* tests/
    - mv docs/* tests/
    - mv ${CI_PROJECT_NAME} tests/
    - mv mender-artifact tests/
    - if [ -f keys/private.pem ]; then
        mv keys/private.pem tests/;
      fi
    - docker load -i tests_image.tar
    - docker load -i acceptance_testing_image.tar
    - if [ -n "$REGISTRY_MENDER_IO_USERNAME" ]; then
        docker login -u $REGISTRY_MENDER_IO_USERNAME -p $REGISTRY_MENDER_IO_PASSWORD registry.mender.io;
      fi
  script:
    - TESTS_DIR=$(pwd)/tests $(pwd)/tests/run-test-environment acceptance $(pwd)/mender-integration $(pwd)/tests/docker-compose-acceptance.yml
    - if [ -f $(pwd)/tests/docker-compose-acceptance-enterprise.yml ]; then
        TESTS_DIR=$(pwd)/tests $(pwd)/tests/run-test-environment acceptance $(pwd)/mender-integration $(pwd)/tests/docker-compose-acceptance-enterprise.yml;
      fi
  artifacts:
    expire_in: 2w
    paths:
      - tests/acceptance.*
      - tests/coverage-acceptance.txt
    when: always

publish:acceptance:
  stage: publish
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  image: golang:1.14-alpine3.11
  dependencies:
    - test:acceptance_tests
  before_script:
    - apk add --no-cache git
    # Run go get out of the repo to not modify go.mod
    - cd / && go get github.com/mattn/goveralls && cd -
    # Coveralls env variables:
    #  According to https://docs.coveralls.io/supported-ci-services
    #  we should set CI_NAME, CI_BUILD_NUMBER, etc. But according
    #  to goveralls source code (https://github.com/mattn/goveralls)
    #  many of these are not supported. Set CI_BRANCH, CI_PR_NUMBER,
    #  and pass few others as command line arguments.
    #  See also https://docs.coveralls.io/api-reference
    - export CI_BRANCH=${CI_COMMIT_BRANCH}
    - export CI_PR_NUMBER=${CI_COMMIT_BRANCH#pr_}
  script:
    - goveralls
      -repotoken ${COVERALLS_TOKEN}
      -service gitlab-ci
      -jobid $CI_PIPELINE_ID
      -covermode set
      -flagname acceptance
      -parallel
      -coverprofile ./tests/coverage-acceptance.txt

coveralls:finish-build:
  stage: .post
  # See https://docs.coveralls.io/parallel-build-webhook
  variables:
    COVERALLS_WEBHOOK_URL: "https://coveralls.io/webhook"
  image: appropriate/curl
  script:
    - 'curl -k ${COVERALLS_WEBHOOK_URL}?repo_token=${COVERALLS_TOKEN} -d "payload[build_num]=$CI_PIPELINE_ID&payload[status]=done"'
