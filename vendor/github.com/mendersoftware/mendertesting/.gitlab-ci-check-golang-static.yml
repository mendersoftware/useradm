# .gitlab-ci-check-golang-static.yml
#
# This gitlab-ci template performs the following static checks on Go code:
# - check format with go fmt
# - check code health with go vet
# - check complexity with gocyclo
#
# Add it to the project in hand through Gitlab's include functionality
#
# include:
#   - project: 'Northern.tech/Mender/mendertesting'
#     file: '.gitlab-ci-check-golang-static.yml'
#
# If the repo has some compile time dependencies, the template expect to
# exist a deb-requirements.txt file with the Debian OS required packages
#

stages:
  - test

test:static:
  stage: test
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  image: golang:1.14
  before_script:
    # Install cyclomatic dependency analysis tool
    - GO111MODULE=off go get -u github.com/fzipp/gocyclo/...
    # Install compile dependencies
    - if [ -f deb-requirements.txt ]; then
        apt-get -qq update &&
        apt install -yq $(cat deb-requirements.txt);
      fi
    # Prepare GOPATH for the build
    - mkdir -p /go/src/github.com/mendersoftware
    - cp -r ${CI_PROJECT_DIR} /go/src/github.com/mendersoftware/${CI_PROJECT_NAME}
    - cd /go/src/github.com/mendersoftware/${CI_PROJECT_NAME}
  script:
    # Test if code was formatted with 'go fmt'
    # Command will format code and return modified files
    # fail if any have been modified.
    - if [ -n "$(go fmt)" ]; then echo 'Code is not formatted with "go fmt"'; false; fi
    # Perform static code analysys
    - go vet `go list ./... | grep -v vendor`
    # Fail builds when the cyclomatic complexity reaches 20 or more
    - gocyclo -over 20 `find . -iname '*.go' | grep -v 'vendor' | grep -v '_test.go'`
