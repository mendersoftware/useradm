# .gitlab-ci-check-docker-build.yml
#
# This gitlab-ci template builds a Docker image and publishes it
# on Docker Hub or Mender Registry
#
# Requires DOCKER_REPOSITORY variable to be set in the calling Pipeline.
# Add it to the project in hand through Gitlab's include functionality
# variables:
#   DOCKER_REPOSITORY: <Image FQN, i.e mendersoftware/reponame>
# include:
#   - project: 'Northern.tech/Mender/mendertesting'
#     file: '.gitlab-ci-check-docker-build.yml'
#
# It assumes a Dockerfile in the root of the repository. A different
# directory or a different Dockerfile filename can optionally be specified
# using the following variables:
#   DOCKER_DIR: <relative path, i.e service/> (optional)
#   DOCKERFILE: <filename, i.e. Dockerfile.custom> (optional)
#
# Requires credentials for the registry where to push the image.
# Set in the project CI/CD settings either Docker Hub credentials:
#   DOCKER_HUB_USERNAME: Username for docker.io
#   DOCKER_HUB_PASSWORD: Password for docker.io
# or Mender Registry ones:
#   REGISTRY_MENDER_IO_USERNAME: Username for registry.mender.io
#   REGISTRY_MENDER_IO_PASSWORD: Password for registry.mender.io
#
# Passes the following variables to the build:
#   * GIT_COMMIT_TAG
#     * SHA of git commit at which build ocurred
#     * passed via: --build-arg GIT_COMMIT_TAG="${DOCKER_PUBLISH_COMMIT_TAG}"
#
# Saves in a dotenv file the published image digests. These env variables
# can be used by later jobs that have publish:image or publish:image:mender
# as dependencies:
#   * PUBLISH_IMAGE_DIGEST
#   * PUBLISH_IMAGE_MENDER_DIGEST
#

stages:
  - build
  - publish

.export_docker_vars: &export_docker_vars |
  export DOCKER_BUILD_TAG=${CI_COMMIT_REF_SLUG:-local}
  export DOCKER_BUILD_SERVICE_IMAGE=${DOCKER_REPOSITORY}:${DOCKER_BUILD_TAG}
  export DOCKER_PUBLISH_TAG=${CI_COMMIT_REF_NAME}
  export DOCKER_PUBLISH_COMMIT_TAG=${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}

.get_release_tool_alpine: &get_release_tool_alpine |
  apk add git python3 py3-pip
  pip3 install pyyaml
  git clone https://github.com/mendersoftware/integration.git mender-integration
  alias release_tool=$(realpath mender-integration/extra/release_tool.py)

build:docker:
  stage: build
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  tags:
    - docker
  image: docker
  services:
    - docker:19.03.5-dind
  before_script:
    - *export_docker_vars
  script:
    - echo "building ${CI_PROJECT_NAME} for ${DOCKER_BUILD_SERVICE_IMAGE}"
    - docker build
        --tag $DOCKER_BUILD_SERVICE_IMAGE
        --file ${DOCKER_DIR:-.}/${DOCKERFILE:-Dockerfile}
        --build-arg GIT_COMMIT_TAG="${DOCKER_PUBLISH_COMMIT_TAG}"
        ${DOCKER_DIR:-.}
    - docker save $DOCKER_BUILD_SERVICE_IMAGE > image.tar
  artifacts:
    expire_in: 2w
    paths:
      - image.tar

publish:image:
  stage: publish
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  only:
    refs:
      # NOTE: We can remove [0-9]+\.[0-9]+\.x from here after 2.3.x goes EOL
      - /^(master|staging|production|feature-.+|[0-9]+\.[0-9]+\.x)$/
  tags:
    - docker
  image: docker
  services:
    - docker:19.03.5-dind
  dependencies:
    - build:docker
  before_script:
    - *export_docker_vars
  script:
    - docker load -i image.tar
    - docker tag $DOCKER_BUILD_SERVICE_IMAGE $DOCKER_REPOSITORY:$DOCKER_PUBLISH_TAG
    - docker tag $DOCKER_BUILD_SERVICE_IMAGE $DOCKER_REPOSITORY:$DOCKER_PUBLISH_COMMIT_TAG
    - docker login -u $REGISTRY_MENDER_IO_USERNAME -p $REGISTRY_MENDER_IO_PASSWORD registry.mender.io
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker push $DOCKER_REPOSITORY:$DOCKER_PUBLISH_TAG
    - docker push $DOCKER_REPOSITORY:$DOCKER_PUBLISH_COMMIT_TAG
    - echo "PUBLISH_IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $DOCKER_REPOSITORY:$DOCKER_PUBLISH_TAG)" >> publish.env
  artifacts:
    reports:
      dotenv: publish.env

publish:image:mender:
  stage: publish
  only:
    refs:
      - /^(master|[0-9]+\.[0-9]+\.x)$/
  tags:
    - docker
  image: docker
  services:
    - docker:19.03.5-dind
  dependencies:
    - build:docker
  before_script:
    # Use same variables for loading the image, while DOCKER_PUBLISH_COMMIT_TAG will be ignored
    - *export_docker_vars
    # Install release_tool
    - *get_release_tool_alpine
  script:
    # If the repo is not recognized, ignore
    - if ! echo $(release_tool --list git --all) | grep $CI_PROJECT_NAME; then
    -  echo "Repository $CI_PROJECT_NAME not found in release_tool. Exiting"
    -  exit 0
    - fi
    # If the repo/branch is not part of a Mender release, also ignore
    - integration_versions=$(release_tool --integration-versions-including $CI_PROJECT_NAME --version $CI_COMMIT_REF_NAME | sed -e 's/origin\///')
    - if test -z "$integration_versions"; then
    -  echo "Repository $CI_PROJECT_NAME version $CI_COMMIT_REF_NAME is not part of any Mender release. Exiting"
    -  exit 0
    - fi
    # Load image and logins
    - docker load -i image.tar
    - docker login -u $REGISTRY_MENDER_IO_USERNAME -p $REGISTRY_MENDER_IO_PASSWORD registry.mender.io
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    # Publish the image for all releases
    - for version in $integration_versions; do
    -   docker tag $DOCKER_BUILD_SERVICE_IMAGE $DOCKER_REPOSITORY:mender-${version}
    -   docker tag $DOCKER_BUILD_SERVICE_IMAGE $DOCKER_REPOSITORY:mender-${version}_${CI_COMMIT_SHA}
    -   docker push $DOCKER_REPOSITORY:mender-${version}
    -   docker push $DOCKER_REPOSITORY:mender-${version}_${CI_COMMIT_SHA}
    - done
    - echo "PUBLISH_IMAGE_MENDER_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $DOCKER_REPOSITORY:mender-${version})" >> publish.env
  artifacts:
    reports:
      dotenv: publish.env

trigger:saas:sync-staging-component:
  stage: .post
  only:
    refs:
      - /^staging$/
  image: alpine
  before_script:
    - *export_docker_vars
    - *get_release_tool_alpine
    - apk add --no-cache curl
  script:
    # If the repo is not recognized, ignore
    - if ! echo $(release_tool --list git --all) | grep $CI_PROJECT_NAME; then
    -  echo "Repository $CI_PROJECT_NAME not found in release_tool. Exiting"
    -  exit 0
    - fi
    # Trigger the sync once per container in this repo
    - for container in $(release_tool -m git ${CI_PROJECT_NAME} container); do
    -   echo "Triggering saas staging sync for container $container version ${DOCKER_PUBLISH_COMMIT_TAG}"
    -   curl -v -f -X POST
          -F token=${SAAS_TRIGGER_TOKEN}
          -F ref=master
          -F variables[TRIGGER_SYNC_STAGING_COMPONENT]=true
          -F variables[SYNC_CONTAINER_NAME]=${container}
          -F variables[SYNC_IMAGE_TAG]=${DOCKER_PUBLISH_COMMIT_TAG}
          https://gitlab.com/api/v4/projects/17809112/trigger/pipeline
    - done

# saas-specific job to retag docker images after saas-* tags are pushed to the repository
publish:image:saas:
  stage: publish
  only:
    refs:
      - /^saas-[a-zA-Z0-9.]+$/
  tags:
    - docker
  image: docker
  services:
    - docker:19.03.5-dind
  before_script:
    - export SOURCE_TAG=staging_${CI_COMMIT_SHA}
    - export DOCKER_PUBLISH_TAG=${CI_COMMIT_REF_NAME}
    - export SERVICE_IMAGE=${DOCKER_REPOSITORY}:${DOCKER_PUBLISH_TAG}
  script:
    - docker login -u $REGISTRY_MENDER_IO_USERNAME -p $REGISTRY_MENDER_IO_PASSWORD registry.mender.io
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker pull $DOCKER_REPOSITORY:$SOURCE_TAG
    - docker tag $DOCKER_REPOSITORY:$SOURCE_TAG $SERVICE_IMAGE
    - docker push $SERVICE_IMAGE
