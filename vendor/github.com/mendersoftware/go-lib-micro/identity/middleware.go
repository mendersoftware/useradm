// Copyright 2020 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
package identity

import (
	"github.com/ant0ine/go-json-rest/rest"

	"github.com/mendersoftware/go-lib-micro/log"
)

// IdentityMiddleware adds the identity extracted from JWT token to the request's context.
// IdentityMiddleware does not perform any form of token signature verification.
// If it is not possible to extract identity from header error log will be generated.
// IdentityMiddleware will not stop control propagating through the chain in any case.
// It is recommended to use IdentityMiddleware with RequestLogMiddleware and
// RequestLogMiddleware should be placed before IdentityMiddleware.
// Otherwise, log generated by IdentityMiddleware will not contain "request_id" field.
type IdentityMiddleware struct {
	// If set to true, the middleware will update context logger setting
	// 'user_id' or 'device_id' to the value of subject field, if the token
	// is not a user or a device token, the middelware will add a 'sub'
	// field to the logger
	UpdateLogger bool
}

// MiddlewareFunc makes IdentityMiddleware implement the Middleware interface.
func (mw *IdentityMiddleware) MiddlewareFunc(h rest.HandlerFunc) rest.HandlerFunc {
	return func(w rest.ResponseWriter, r *rest.Request) {
		jwt, err := ExtractJWTFromHeader(r.Request)
		if err != nil {
			h(w, r)
			return
		}

		ctx := r.Context()
		l := log.FromContext(ctx)

		identity, err := ExtractIdentity(jwt)
		if err != nil {
			l.Warnf("Failed to parse extracted JWT: %s",
				err.Error(),
			)
		} else {
			if mw.UpdateLogger {
				logCtx := log.Ctx{}

				key := "sub"
				if identity.IsDevice {
					key = "device_id"
				} else if identity.IsUser {
					key = "user_id"
				}

				logCtx[key] = identity.Subject

				if identity.Tenant != "" {
					logCtx["tenant_id"] = identity.Tenant
				}

				if identity.Plan != "" {
					logCtx["plan"] = identity.Plan
				}

				l = l.F(logCtx)
				ctx = log.WithContext(ctx, l)
			}
			ctx = WithContext(ctx, &identity)
			r.Request = r.WithContext(ctx)
		}

		h(w, r)
	}
}
