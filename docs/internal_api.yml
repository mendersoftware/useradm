swagger: '2.0'
info:
  version: '0.1'
  title: User administration and authentication
  description: |
    An API for user administration and user authentication handling. Not exposed via the API Gateway - intended for internal use only.

basePath: '/api/internal/v1/useradm'
host: 'mender-device-auth:8080'
schemes:
  - http

paths:
  /auth/verify:
    post:
     summary: Check the validity of a token
     description: |
        Besides the basic validity check, checks the token expiration time and user-initiated token revocation.

        Services which intend to use it should be correctly set up in the gateway's configuration.
     parameters:
       - name: Authorization
         in: header
         description: The token in base64-encoded form.
         required: true
         type: string
         format: Bearer [token]
       - name: X-Original-URI
         in: header
         description: |
           URI the original request was sent to, the URI is expected to have
           at least 4 components, eg. /api/management/1.0/foo/bar
         required: true
         type: string
         format: HTTP path
       - name: X-Original-Method
         in: header
         description: HTTP method used when accessing the original URI
         required: true
         type: string
         enum:
           - GET
           - PUT
           - POST
           - DELETE
     responses:
        200:
            description: The token is valid.
        400:
            description: Missing or malformed request parameters.
        401:
            description: Verification failed, authentication should not be granted.
        403:
            description: Token has expired - apply for a new one.
        500:
            description: Unexpected error.
            schema:
              $ref: '#/definitions/Error'
  /tenants:
    post:
      summary: Create tenant
      description: |
        Create a tenant with provided configuration.
      parameters:
        - name: tenant
          in: body
          required: true
          schema:
            $ref: "#/definitions/TenantNew"
      responses:
        201:
          description: The tenant was created successfully.
        400:
          description: Missing or malformed request parameters.
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /tenants/{tenant_id}/users:
    post:
      summary: Create user
      parameters:
        - name: tenant_id
          in: path
          type: string
          description: Tenant ID.
          required: true
        - name: user
          in: body
          description: New user data.
          required: true
          schema:
            $ref: "#/definitions/UserNew"
      responses:
        201:
          description: The user was successfully created.
        400:
          description: |
              The request body is malformed.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: |
                Tenant with given ID does not exist.
          schema:
            $ref: '#/definitions/Error'
        422:
          description: |
                User name or ID is duplicated.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"
  /tokens:
    delete:
      summary: Delete all user tokens
      description: |
         This endpoint is designed to be used for tenant account suspension purpose.
         When only tenant_id parameter is set, tokens for all tenant users will be removed.
         It is also possible to remove tokens for user with given user_id by setting
         optional user_id parameter.
      parameters:
        - name: tenant_id
          in: query
          type: string
          description: Tenant ID.
          required: true
        - name: user_id
          in: query
          type: string
          description: User ID.
      responses:
        204:
          description: Tokens deleted.
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"

definitions:
  Error:
    description: Error descriptor.
    type: object
    properties:
      error:
        description: Description of the error.
        type: string
    example:
      error: "missing Authorization header"
  TenantNew:
    description: Tenant configuration.
    type: object
    properties:
      tenant_id:
        description: ID of given tenant.
        type: string
    example:
      tenant_id: "1234"
  UserNew:
    description: New user descriptor.
    type: object
    properties:
      email:
        description: User's email.
        type: string
        format: email
      password:
        description: User's password.
        type: string
      propagate:
        description: |
          When propagate is true, the useradm will propagate user information
          to tenantadm, otherwise no request to tenantadm will be made.
          Defaults to true.
        type: boolean
    required:
      - email
      - password
    example:
      email: 'user@acme.com'
      password: 'secret'
      propagate: false
