swagger: '2.0'
info:
  version: '1'
  title: User administration and authentication
  description: |
    An API for user administration and user authentication handling. Intended for use by the web GUI.
    All responses from the API will contain 'X-MEN-RequestID' header with server-side generated request ID.

basePath: '/api/management/v1/useradm'
host: 'hosted.mender.io'
schemes:
  - https

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  Login:
    type: basic
  ManagementJWT:
    type: apiKey
    in: header
    name: Authorization
    description: |
      API token issued by User Authentication service.
      Format: 'Bearer [JWT]'

paths:
  /auth/login:
    post:
      operationId: Login
      tags:
        - Management API
      security:
        - Login: []
      summary: Log in to Mender
      description: |
        Accepts user credentials via standard Basic Auth, and returns a
        JWT token to be used for authentication in subsequent requests.
      produces:
        - application/jwt
        - application/json
      responses:
        200:
          description: |
            Authentication successful - a new JWT is issued and returned.
            The JWT is signed with the API's private key ('RS256' signing algorithm),
            and contains the following standard claims:
            * 'iss' - issuer
            * 'exp' - expiry date
            * 'sub' - unique, autogenerated user ID
            * 'scp' - 'mender.*', allows access to all APIs/methods
          schema:
            type: string
            example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NzYxMTkxMzYsImlzcyI6Ik1lbmRlciIsInN1YiI6Ijg1NGIzMTA5LTQ4NjItNGEyNS1hMWZiLWYxMTE2MWNlN2E4NCIsInNjcCI6WyJtZW5kZXIuKiJdfQ.X7Ief4PhPLlR6mA2wh3G3K0Z2tud0rK1QJesxu52NfICSeARmlujczs-_1YZxMwI0s-HgpXHbXIjaSVK80BjxjAM1rqpRGvgqSqG-dU5KmglDpAaTr4VaJci3VFPlVUVTRpI7bfqNMnKZtjmOUAGwjvroDUwX1RwayEmms-efGI

        400:
          description: Bad request, see error message for details.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized.
          schema:
            $ref: '#/definitions/Error'
        429:
          description: Login attempt rate limited
          schema:
            $def: '#/defineitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'

  /auth/logout:
    post:
      operationId: Logout
      tags:
        - Management API
      security:
        - ManagementJWT: []
      summary: Log out from Mender
      description: |
        Invalidates the JWT token of the current user.
      produces:
        - application/json
      responses:
        202:
          description: |
            Request has been accepted and the JWT token has been invalidated.

        400:
          description: Bad request, see error message for details.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'

  /users:
    get:
      operationId: List Users
      tags:
        - Management API
      security:
        - ManagementJWT: []
      summary: |
        List all users registered under the tenant owning the JWT.
      parameters:
        - name: id
          in: query
          type: string
          description: >
            Limit result by user ID, can be repeated to include multiple users
            in the query.
          required: false
        - name: email
          in: query
          type: string
          description: >
            Limit result by user email, can be repeated to include multiple users
            in the query.
          required: false
        - name: created_after
          in: query
          type: integer
          description: >
            Filter users created after timestamp (UNIX timestamp).
          required: false
        - name: created_before
          in: query
          type: integer
          description: >
            Filter users created before timestamp (UNIX timestamp).
          required: false
        - name: updated_after
          in: query
          type: integer
          description: >
            Filter users updated after timestamp (UNIX timestamp).
          required: false
        - name: updated_before
          in: query
          type: integer
          description: >
            Filter users updated before timestamp (UNIX timestamp).
          required: false
      responses:
        200:
          description: Successful response.
          schema:
            title: ListOfUsers
            type: array
            items:
              $ref: '#/definitions/User'
        401:
          description: |
                The user cannot be granted authentication.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"

    post:
      operationId: Create User
      tags:
        - Management API
      security:
        - ManagementJWT: []
      summary: |
        Create a new user under the tenant owning the JWT.
      parameters:
        - name: user
          in: body
          description: New user data.
          required: true
          schema:
            $ref: "#/definitions/UserNew"
      responses:
        201:
          description: The user was successfully created.
          headers:
            Location:
              type: string
              description: URI for the newly created 'User' resource.
        400:
          description: |
              The request body is malformed.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: |
                The user cannot be granted authentication.
          schema:
            $ref: '#/definitions/Error'
        422:
          description: |
                The email address is duplicated, password is too short or current password doesn't match.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"
  /users/{id}:
    get:
      operationId: Show User
      tags:
        - Management API
      security:
        - ManagementJWT: []
      summary: Get user information
      parameters:
        - name: id
          in: path
          type: string
          description: User id. Set to "me" for the current user.
          required: true
      responses:
        200:
          description: Successful response - a user information is returned.
          schema:
            $ref: "#/definitions/User"
        401:
          description: |
                The user cannot be granted authentication.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The user was not found.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"
    put:
      operationId: Update User
      tags:
        - Management API
      security:
        - ManagementJWT: []
      summary: Update user information
      parameters:
        - name: id
          in: path
          type: string
          description: User id. Set to "me" for the current user.
          required: true
        - name: update
          in: body
          description: Updated user data.
          required: true
          schema:
            $ref: "#/definitions/UserUpdate"
      responses:
        204:
          description: User information updated.
        400:
          description: |
              The request body is malformed.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: |
                The user cannot be granted authentication.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
                The user does not exist.
          schema:
            $ref: '#/definitions/Error'
        422:
          description: |
                The email address is duplicated or password is too short.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"
    delete:
      operationId: Remove User
      tags:
        - Management API
      security:
        - ManagementJWT: []
      summary: Remove user from the system
      parameters:
        - name: id
          in: path
          type: string
          description: User id.
          required: true
      responses:
        204:
          description: User removed.
        401:
          description: |
                The user cannot be granted authentication.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"

  /settings:
    get:
      operationId: Show User Settings
      tags:
        - Management API
      security:
        - ManagementJWT: []
      summary: Get user settings
      responses:
        200:
          description: Successful response - a user information is returned.
          schema:
            $ref: "#/definitions/Settings"
        401:
          description: |
                The user cannot be granted authentication.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"
    post:
      operationId: Update User Settings
      tags:
        - Management API
      security:
        - ManagementJWT: []
      summary: Set user settings
      description: |
        Create user settings or replace existing settings with provided object.
      parameters:
        - name: settings
          in: body
          description: New user settings.
          required: true
          schema:
            $ref: "#/definitions/Settings"
      responses:
        201:
          description: User settings set.
        400:
          description: |
              The request body is malformed.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: |
                The user cannot be granted authentication.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            $ref: "#/definitions/Error"

definitions:
  UserNew:
    description: New user descriptor.
    type: object
    properties:
      email:
        description: A unique email address. Non-ascii characters are invalid.
        type: string
      password:
        description: Password.
        type: string
    required:
      - email
      - password
    example:
      email: 'user@acme.com'
      password: 'mypass1234'
  UserUpdate:
    description: Update user information.
    type: object
    properties:
      email:
        description: A unique email address.
        type: string
      password:
        description: New password.
        type: string
      current_password:
        description: Current password.
        type: string
    example:
      email: 'new_email@acme.com'
      password: 'new password'
      current_password: 'old password'
  User:
    description: User descriptor.
    type: object
    properties:
      email:
        description: A unique email address.
        type: string
      id:
        description: User Id.
        type: string
      created_ts:
        description: |
            Server-side timestamp of the user creation.
        type: string
        format: date-time
      updated_ts:
        description: |
            Server-side timestamp of the last user information update.
        type: string
        format: date-time
      login_ts:
        description: |-
            Timestamp of last successful login.
        type: string
        format: date-time
    required:
      - email
      - id
    example:
      email: "user@acme.com"
      id: "806603def19d417d004a4b67e"
      created_ts: "2020-07-06T15:04:49.114046203+02:00"
      updated_ts: "2020-07-07T01:04:49.114046203+02:00"

  Error:
    description: Error descriptor.
    type: object
    properties:
      error:
        description: Description of the error.
        type: string
      request_id:
        description: Request ID (same as in X-MEN-RequestID header).
        type: string
    example:
      error: "missing Authorization header"
      request_id: "f7881e82-0492-49fb-b459-795654e7188a"

  Settings:
    description: User settings.
    type: object
