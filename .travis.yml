language: go

# Forces travis to use VM insted container, required to be able to build containers.
# test
sudo: required

services:
    - docker
    - mongodb

# Golang version matrix
go:
    - 1.8

env:
    matrix:
        - JOB_TYPE=compile_and_basic_tests
        - JOB_TYPE=acceptance_tests

    global:
        # Should be encrypted or set as private travis variables (in travis settings):
        # AWS_ACCESS_KEY_ID
        # AWS_SECRET_ACCESS_KEY
        # DOCKER_HUB_EMAIL
        # DOCKER_HUB_USERNAME
        # DOCKER_HUB_PASSWORD

        # AWS S3 bucket name, to store updated docs
        - AWS_BUCKET_DOCS=mender-docs

        # AWS region.
        - AWS_REGION=eu-west-1

        # Docker repository name
        - DOCKER_REPOSITORY="mendersoftware/useradm"

        # Use correct branch for testing
        - TEST_BRANCH=$TRAVIS_BRANCH

before_install:

    # Install code coverage tooling
    - go get -u github.com/axw/gocov/gocov
    - go get -u golang.org/x/tools/cmd/cover

    # Install cyclomatic dependency analysis tool
    - go get -u github.com/fzipp/gocyclo

    # Install mongo 3.2
    - sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
    - echo "deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list
    - sudo apt-get -qq update
    - sudo apt-get install -y mongodb-org


    - sudo apt-get -qq update
    - sudo apt-get -qq install -y e2tools
    - npm install -g swagger-cli

    - pip2.7 install -U --user paramiko fabric PyYAML pytest requests pytest-xdist filelock

    # Get our own Swagger verifier
    - wget https://raw.githubusercontent.com/mendersoftware/autodocs/master/verify_docs.py

install: true

before_script:
    # Print build info that binary is compiled with.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG

    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin

    # Test if code was formatted with 'go fmt'
    # Command will format code and return modified files
    # fail if any have been modified.
    - if [ -n "$(go fmt)" ]; then echo 'Code is not formatted with "go fmt"'; false; fi

    # Perform static code analysys
    - go vet `go list ./... | grep -v vendor`

    # Fail builds when the cyclomatic complexity reaches 15 or more
    - gocyclo -over 15 `find . -iname '*.go' | grep -v 'vendor' | grep -v '_test.go'`

    # Verify that the Swagger docs are valid
    - if test "$(ls -A docs)"; then swagger validate docs/*.yml; fi

    # Verify that the Swagger docs follow the autodeployment requirements
    - if test "$(ls -A docs)"; then python2.7 verify_docs.py `find docs -name "*.yml"`; fi

script:
    # go list supply import paths for all sub directories.
    # Exclude vendor directory, we don't want to run tests and coverage for all dependencies every time,
    # also including their coverage may introduce to much noice. Concentrate on the coverage of local packages.
    # Execute go test on every local subpackage (resolved as dependencies) and generate covreage report for each.
    # Test packages pararell (xargs -P)
    # Also build the docker container (with embedded build info), that will be pushed to dockerhub later on.
    - if [ "$JOB_TYPE" = compile_and_basic_tests ]; then
        go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} || exit $? ;

        CGO_ENABLED=0 go build -ldflags "-X main.Commit=`echo $TRAVIS_COMMIT` -X main.Tag=`echo $TRAVIS_TAG` -X main.Branch=`echo $TRAVIS_BRANCH` -X main.BuildNumber=`echo $TRAVIS_BUILD_NUMBER`" ;
        sudo docker build -t $DOCKER_REPOSITORY:pr . ;
      fi

    # Pull integration repo, copy build/run scripts
    # Build container-under-test
    # Build testing container
    # Run tests
    - if [ "$JOB_TYPE" = acceptance_tests ]; then
        git clone -b master https://github.com/mendersoftware/integration.git;
        mv integration/extra/travis-testing/* tests/ ;

        CGO_ENABLED=0 go test -c -o useradm-test -coverpkg $(go list ./... | grep -v vendor | grep -v mocks | grep -v test | tr  '\n' ,);

        sudo docker build -f Dockerfile.acceptance-testing -t mendersoftware/useradm:prtest .;

        go build ;
        ./tests/build-acceptance ./tests ./docs/internal_api.yml ./docs/management_api.yml useradm;

        TESTS_DIR=$PWD/tests ./tests/run-test-environment "acceptance" $PWD/integration ./tests/docker-compose-acceptance.yml ;
      fi

after_success:
    # Integrate with https://codecov.io
    - if [[ "$JOB_TYPE" = compile_and_basic_tests ]]; then
        bash <(curl -s https://codecov.io/bash) -F unittests ;
      fi

    - if [[ "$JOB_TYPE" = acceptance_tests ]]; then
        bash <(curl -s https://codecov.io/bash) -F acceptance -f ./tests/coverage-acceptance.txt;
      fi

before_deploy:
    # Upload image to docker registry only on PUSH
    - if [ "$JOB_TYPE" = compile_and_basic_tests ]; then
        if [ ! -z "$TRAVIS_TAG" ]; then export IMAGE_TAG=$TRAVIS_TAG; else export IMAGE_TAG=$TRAVIS_BRANCH; fi ;
        docker tag $DOCKER_REPOSITORY:pr $DOCKER_REPOSITORY:$IMAGE_TAG ;
        docker login --email=$DOCKER_HUB_EMAIL --username=$DOCKER_HUB_USERNAME --password=$DOCKER_HUB_PASSWORD ;
        docker push $DOCKER_REPOSITORY:$IMAGE_TAG ;
      fi

deploy:

    # Store docs for auto-deployment script
    -
        provider: s3
        access_key_id: $AWS_ACCESS_KEY_ID
        secret_access_key: $AWS_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET_DOCS
        region: $AWS_REGION
        upload-dir: $TRAVIS_REPO_SLUG/latest/$TRAVIS_BRANCH
        local_dir: docs
        skip_cleanup: true
        acl: public_read
        on:
            repo: $TRAVIS_REPO_SLUG
            all_branches: true
